{"version":3,"sources":["logo.svg","todoitem.js","sublist.js","todolist.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoItem","props","state","inputvalue","copy","checked","inputRef","React","createRef","composition","handlePaste","bind","e","preventDefault","paste","clipboardData","window","getData","document","execCommand","this","focus","range","createRange","selection","getSelection","selectNodeContents","current","collapse","removeAllRanges","addRange","checkbox","handleStoreItem","outerText","setState","target","console","log","collapsed","endOffset","startOffset","getRangeAt","focusNode","focusOffset","key","handleCreateNext","id","handleToDoBlur","status","itemcheck","type","className","onChange","handleCheck","deleteBtn","onClick","handleDeleteToDoItem","contentEditable","placeholder","value","renew","handleToDoInput","onInput","onBlur","onKeyDown","handleToDoKeyDown","onPaste","autoComplete","spellCheck","wrap","suppressContentEditableWarning","ref","onCompositionStart","handleCompositionStart","onCompositionEnd","handleCompositionEnd","Component","SubList","itemsTodo","itemsDone","sublistTitle","storedtree","localStorage","getItem","JSON","parse","forEach","list","listid","tree","todotree","slice","map","item","handleStoreToDoList","itemid","Date","now","concat","pos","findIndex","isIdSame","removedid","splice","innerText","handleStoreSubListTitle","todoitems","doneitems","length","index","handleClickLabel","f","g","handleDeleteToDo","ToDoList","count","idlist","parsedtree","example","storeTree","removeItem","stringify","setItem","title","newtodotree","indexOf","nodeidlist","handleCreateToDo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5d541cba.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport './todolist.css'\r\n\r\n\r\nclass ToDoItem extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            inputvalue: \"\",\r\n            copy: false,\r\n            checked: this.props.checked,\r\n        }\r\n\r\n        this.inputRef = React.createRef();\r\n        this.composition = false;\r\n        this.handlePaste = this.handlePaste.bind(this);\r\n    }\r\n\r\n    handlePaste(e){\r\n        e.preventDefault();\r\n        // console.log(this.state)\r\n        // actually just change the clipboard data\r\n        // console.log((e.clipboardData || window.clipboardData).getData('text'));\r\n        // console.log(paste,typeof(paste));\r\n        let paste = (e.clipboardData || window.clipboardData).getData('text');\r\n        document.execCommand('insertText',false,paste);\r\n\r\n        /*USING THE CLIPBOARD IS A PAIN TO HANDLE INPUT BESIDES USING document.execComand */\r\n        // (e.clipboardData || window.clipboardData).setData(\"text\",paste);\r\n        // const originvalue = this.state.inputvalue;\r\n        // console.log(paste,typeof(paste),originvalue);\r\n        // console.log(originvalue.concat(paste));\r\n        // console.log((e.clipboardData || window.clipboardData).getData('html'));\r\n        // this.setState({\r\n        //     copy: !this.state.copy\r\n        // })\r\n        // e.target.paste()\r\n    }\r\n\r\n    // prevent the component from updating every input\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     console.log(\"should Component Update? see:\",\r\n    //                         nextProps,\r\n    //                         nextState,\r\n    //                         this)\r\n    //     const inputRef = this.inputRef.current;\r\n    //     return nextState.inputvalue !== inputRef.outerText;//|| nextState.copy !== this.state.copy;\r\n    // }\r\n\r\n    // manually focus if needed\r\n    componentDidMount(){\r\n        //https://stackoverflow.com/questions/6249095/how-to-set-caretcursor-position-in-contenteditable-element-div\r\n        // if want to set to the last need to set Range asnd Selection\r\n        if(this.props.focus){\r\n            let range = document.createRange();\r\n            let selection = document.getSelection();\r\n            \r\n            // range.setStart(this.inputRef.current);\r\n            range.selectNodeContents(this.inputRef.current);\r\n            range.collapse(false);\r\n            \r\n            selection.removeAllRanges()\r\n            selection.addRange(range);\r\n            \r\n            this.inputRef.current.focus();\r\n        }\r\n        // console.log(\"MOUNT TODO ITEM\",this);\r\n        if(this.props.checkbox)\r\n            this.props.handleStoreItem(this.state.checked,this.inputRef.current.outerText);\r\n    }\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event\r\n    // When typing chinese reading the <Enter> key will break the app\r\n    handleCompositionStart(){\r\n        this.composition = true;\r\n    }\r\n\r\n    handleCompositionEnd(){\r\n        this.composition = false;\r\n    }\r\n\r\n    handleToDoInput(e){\r\n        // console.log(this.state)\r\n        // handle every time the user type (React seems to have same behavior on\r\n        // onInput and onChange for input), ContentEditable component doesn't support\r\n        // onChange see:https://github.com/facebook/react/issues/278\r\n        // console.log(e.target.outerText);\r\n        // if there is input add to the value\r\n        this.setState({\r\n            inputvalue: e.target.outerText\r\n        })\r\n        //get the current caret place\r\n        let range = document.createRange();\r\n        let selection = document.getSelection();\r\n\r\n        console.log(\"rangeoffsets:\",range.collapsed,range.endOffset,range.startOffset)\r\n        // range.selectNodeContents(this.inputRef.current);\r\n        // range.collapse(false);\r\n        \r\n        console.log(\"selection:\",selection.getRangeAt(0),selection.focusNode,selection.focusOffset)\r\n        // selection.removeAllRanges()\r\n        // selection.addRange(range);\r\n        // if is under composition don't update yet\r\n        // this.props.handleStoreItem(this.state.checked,e.target.outerText,true);\r\n    }\r\n\r\n    handleToDoKeyDown(e){\r\n        // console.log(e)\r\n        // if enter is pressed created new and focus on that\r\n        // if chines is still typing (not finished by pressing <Enter> <Space>...)\r\n        // use key for both numpadEnter and Enter\r\n        if(!this.composition && e.key === \"Enter\"){\r\n            console.log(\"Pressed enter!!\",e)\r\n            // catch the enter to not return\r\n            e.preventDefault()\r\n            if(e.target.outerText === null){\r\n                //do nothing\r\n            }else{\r\n                if(this.props.checkbox){\r\n                        this.props.handleCreateNext(this.props.id)\r\n                    // should create a new one just below\r\n                }else{\r\n                    // create with focus\r\n                    e.focus = true;\r\n                    this.props.handleToDoBlur(e,true)\r\n                \r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleToDoBlur(e){\r\n        //if this is create add the value to list if not just stay calm\r\n        // this.setState({\r\n        //     inputvalue: \"no\",\r\n        // })\r\n        // console.log(this.state,\"renew\",this.props.renew)\r\n        if(!this.props.checkbox)\r\n            // console.log(\"blur\",e.target.outerText,e.target.innerText,e)\r\n            if(e.target.outerText!==\"\")\r\n            // if nothing is typed ignored\r\n            // create with no focus\r\n            this.props.handleToDoBlur(e,false);\r\n\r\n        // save the whole tree\r\n        // console.log(\"blur\",this.state.inputvalue,e.target.outerText);\r\n        this.props.handleStoreItem(this.state.checked,e.target.outerText,false);\r\n    }\r\n    handleCheck(e){\r\n        // console.log(e);\r\n        let status = this.state.checked;\r\n        this.setState({\r\n            checked: !status,\r\n        })\r\n        // store checked\r\n        // console.log(\"checked status:\",!status,this.inputRef.current.outerText);\r\n        this.props.handleStoreItem(!status,this.inputRef.current.outerText,false);\r\n    }\r\n\r\n    render(){\r\n\r\n        let itemcheck;\r\n        if(this.props.checkbox === true){\r\n            itemcheck = <input \r\n            type=\"checkbox\" \r\n            id=\"check\"\r\n            className=\"todo-checkbox\"\r\n            // onClick={(e)=>this.handleCheck(e)}\r\n            onChange={(e)=>this.handleCheck(e)}\r\n            checked={this.state.checked}\r\n            ></input>\r\n        } else{\r\n            itemcheck = <div className=\"plus-icon todo-add\">╋</div>\r\n        }\r\n\r\n        const deleteBtn = this.props.checkbox \r\n            ? <button\r\n                onClick={this.props.handleDeleteToDoItem}\r\n                className=\"todo-item-delete-btn\"\r\n              >X</button>\r\n            : null;\r\n        // const html = (this.state.inputvalue || this.props.value);\r\n        \r\n        return(\r\n            <div className=\"todo-item\" >\r\n                {itemcheck}\r\n                <div className=\"todo-item-label\">\r\n                    {/* <label onClick={props.handleClickLabel}>Sth to do</label> */}\r\n                    <div \r\n                        type=\"text\"\r\n                        contentEditable=\"true\"\r\n                        className={ this.state.checked\r\n                                        ? \"todo-item-input todo-item-checked\"\r\n                                        : \"todo-item-input\"}\r\n                        // use CSS to attend the place holder\r\n                        placeholder={this.props.placeholder}\r\n                        value={this.props.renew}\r\n                        onChange={(e) => this.handleToDoInput(e)}\r\n                        onInput={(e)=>this.handleToDoInput(e)}\r\n                        onBlur={(e) => this.handleToDoBlur(e)}\r\n                        onKeyDown={(e) => this.handleToDoKeyDown(e)}\r\n                        onPaste={this.handlePaste}\r\n                        autoComplete=\"off\"\r\n                        spellCheck=\"false\"\r\n                        wrap=\"soft\"\r\n                        suppressContentEditableWarning={true}\r\n                        // autoFocus={true}\r\n                        ref={this.inputRef}\r\n                        onCompositionStart={() => this.handleCompositionStart()}\r\n                        onCompositionEnd={() => this.handleCompositionEnd()}\r\n                        // dangerouslySetInnerHTML={{__html: html}}\r\n                        > \r\n                    {this.props.value}\r\n                    </div>\r\n                </div>\r\n                {deleteBtn}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport './todolist.css';\r\nimport ToDoItem from './todoitem';\r\n\r\n\r\nclass SubList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            itemsTodo: [{\r\n                id: \"create\",\r\n                value: \"\",\r\n                checked: false,\r\n                focus: false,\r\n            }],\r\n            itemsDone: [],\r\n            sublistTitle: \"To-do\",\r\n            renew: true,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        // check if there things in is localstorage\r\n        const storedtree = localStorage.getItem('toDoList');\r\n        if (storedtree){\r\n            const parsedtree = JSON.parse(storedtree);\r\n            parsedtree.forEach(list => {\r\n                if(list.id === this.props.listid){\r\n                    // console.log(\"did mount\",list,this.props.listid)\r\n                    this.setState({\r\n                        itemsTodo: list.tree,\r\n                        sublistTitle: list.sublistTitle\r\n                    })\r\n                }\r\n            });\r\n        }\r\n        if(this.props.todotree){\r\n            this.props.todotree.forEach(list => {\r\n                if(list.id === this.props.listid){\r\n                    // console.log(\"did mount\",list,this.props.listid)\r\n                    this.setState({\r\n                        itemsTodo: list.tree,\r\n                        sublistTitle: list.sublistTitle\r\n                    })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleStoreItem(id,checked,inputvalue,focus){\r\n        // console.log(\"storing\",id,checked,inputvalue);\r\n        // console.log(\"storing itemesTodo\",this.state.itemsTodo);\r\n        const itemsTodo = this.state.itemsTodo.slice();\r\n        itemsTodo.map((item) => {\r\n            if(item.id === id){\r\n                item.value = inputvalue;\r\n                item.checked = checked;\r\n                item.focus = focus;\r\n            }else{\r\n                item.focus = false;\r\n            }\r\n        })\r\n        this.props.handleStoreToDoList(itemsTodo);\r\n    }\r\n\r\n    handleClickLabel(e){\r\n        // aftering clikcing label replace the label with an input\r\n        console.log(this);\r\n        console.log(e);\r\n        // const todoinput = <input type=\"text\" onChange={(e) => this.handleToDoInput(e)}></input>\r\n        // e.target.next\r\n        // e.target.after({todoinput})\r\n        // console.log({todoinput})\r\n        // e.target.remove()\r\n    }\r\n \r\n    handleToDoBlur(e,focus){\r\n        //should handle on blur and <Enter> but haven't\r\n        // clear the \r\n        // setSate after finishing the todo\r\n        const itemsTodo = this.state.itemsTodo.slice();\r\n        const itemid = Date.now();\r\n        // console.log(\"blur focus:\",e,focus)\r\n        this.setState({\r\n            itemsTodo: itemsTodo.concat([{\r\n                id: itemid,\r\n                value: e.target.outerText,\r\n                checked: false,\r\n                focus: focus,\r\n            }]),\r\n            renew: !this.state.renew,\r\n        })\r\n    }\r\n    handleCreateNext(itemid){\r\n        //handle <Enter> and create a new one with no content\r\n        // find the current and insert next\r\n        let itemsTodo = this.state.itemsTodo.slice();\r\n        // console.log(itemsTodo.findIndex(this.isIdSame,itemid));\r\n        let pos = itemsTodo.findIndex(this.isIdSame,itemid);\r\n        const removedid = itemsTodo.splice(pos+1,0,{\r\n            id: Date.now(),\r\n            value: \"\",\r\n            checked: false,\r\n            focus: true,\r\n        });\r\n        console.log(pos,\"removed\",removedid);\r\n        this.setState({\r\n            itemsTodo: itemsTodo,\r\n            renew: !this.state.renew,\r\n        })\r\n    }\r\n\r\n    isIdSame(item){\r\n        // console.log(item.id,this,item.id === this,item.id == this)\r\n        return item.id === this;\r\n    }\r\n\r\n    handleDeleteToDoItem(id){\r\n        const itemid = id;\r\n        let itemsTodo = this.state.itemsTodo.slice();\r\n        // console.log(itemsTodo.findIndex(this.isIdSame,itemid));\r\n        let pos = itemsTodo.findIndex(this.isIdSame,itemid);\r\n        const removedid = itemsTodo.splice(pos,1);\r\n        console.log(pos,\"removed\",removedid);\r\n        this.setState({\r\n            itemsTodo: itemsTodo,\r\n        })\r\n        this.props.handleStoreToDoList(itemsTodo);\r\n    }\r\n    handleStoreSubListTitle(e){\r\n        console.log(e.target.innerText);\r\n        this.props.handleStoreSubListTitle(e.target.innerText);\r\n    }\r\n\r\n    render(){\r\n        // console.log(\"this is id\",this.props.listid,\"my delete handle is\",this.props.handleDeleteToDo)\r\n        // console.log(this.state);\r\n        let itemsTodo = this.state.itemsTodo.slice();\r\n        // if(this.state.itemsDone===null)\r\n            // itemsTodo =  \r\n        let todoitems;let doneitems;\r\n        if(itemsTodo.length === 0){\r\n            todoitems = null\r\n        }else{\r\n            todoitems = itemsTodo.map((item,index) =>{\r\n                // console.log(item);\r\n                if(item.id === \"create\") return null;\r\n                if(item.checked === true) return null;\r\n                return(\r\n                <ToDoItem\r\n                    key={item.id}\r\n                    id={item.id}\r\n                    value={item.value}\r\n                    handleClickLabel={(e) => this.handleClickLabel(e)}\r\n                    handleToDoBlur={(e,f) => this.handleToDoBlur(e,f)}\r\n                    handleDeleteToDoItem={()=>this.handleDeleteToDoItem(item.id)}\r\n                    handleCreateNext={(e)=>this.handleCreateNext(e)}\r\n                    handleStoreItem={(e,f,g)=>this.handleStoreItem(item.id,e,f,g)}\r\n                    placeholder=\"...\"\r\n                    checkbox={true}\r\n                    focus={item.focus}\r\n                    checked={item.checked}\r\n                />)\r\n            });\r\n\r\n            doneitems = itemsTodo.map((item,index) =>{\r\n                // console.log(item);\r\n                if(item.id === \"create\") return null;\r\n                if(item.checked === false) return null;\r\n                return(\r\n                <ToDoItem\r\n                    key={item.id}\r\n                    id={item.id}\r\n                    value={item.value}\r\n                    handleClickLabel={(e) => this.handleClickLabel(e)}\r\n                    handleToDoBlur={(e,f) => this.handleToDoBlur(e,f)}\r\n                    handleDeleteToDoItem={()=>this.handleDeleteToDoItem(item.id)}\r\n                    handleCreateNext={(e)=>this.handleCreateNext(e)}\r\n                    handleStoreItem={(e,f,g)=>this.handleStoreItem(item.id,e,f,g)}\r\n                    placeholder=\"...\"\r\n                    checkbox={true}\r\n                    focus={item.focus}\r\n                    checked={item.checked}\r\n                />)\r\n            });\r\n        }\r\n        // const todoitems = itemsTodo.map((item,index) =>{\r\n        //     return(\r\n        //         <ToDoItem\r\n        //             key={item.id}\r\n        //             value={item.value}\r\n        //             handleClickLabel={(e) => this.handleClickLabel(e)}\r\n        //             handleToDoBlur={(e) => this.handleToDoBlur(e)}\r\n        //             placeholder=\"...\"\r\n        //             checkbox={true}\r\n        //         />\r\n        //     )\r\n        // })\r\n\r\n\r\n        return(\r\n            <div className=\"sublist\">\r\n                <div className=\"sublist-header\">\r\n                    <span \r\n                        contentEditable=\"true\"\r\n                        spellCheck=\"false\"\r\n                        suppressContentEditableWarning={true}\r\n                        onBlur={(e)=>this.handleStoreSubListTitle(e)}\r\n                    >\r\n                        {this.state.sublistTitle}\r\n                    </span>\r\n                    <button \r\n                        className=\"delete-sublist-btn\"\r\n                        onClick={this.props.handleDeleteToDo}\r\n                    >\r\n                        x\r\n                    </button>\r\n                </div>\r\n                {todoitems}\r\n                <ToDoItem\r\n                    key={\"add\"+this.state.renew}\r\n                    handleClickLabel={(e) => this.handleClickLabel(e)}\r\n                    handleToDoBlur={(e,f) => this.handleToDoBlur(e,f)}\r\n                    handleStoreItem={(e)=>this.handleStoreItem(\"add\"+this.state.renew,e)}\r\n                    placeholder=\"Add sth to the list...\"\r\n                    checkbox={false}\r\n                    renew={this.state.renew}\r\n                />\r\n                <hr className=\"todolist-hr\"/>\r\n                {doneitems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubList;","import React from 'react';\r\nimport './todolist.css'\r\nimport SubList  from './sublist';\r\n\r\nclass ToDoList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            count : 0,\r\n            idlist : [],\r\n            todotree : [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        // check if there things in is localstorage\r\n        const storedtree = localStorage.getItem('toDoList');\r\n        if (storedtree){\r\n            const parsedtree = JSON.parse(storedtree);\r\n            console.log(\"TODOLISTMOUNT\",parsedtree)\r\n            let idlist = [];\r\n            let count = 0;\r\n            parsedtree.map((list) =>{\r\n                idlist = idlist.concat([list.id]);\r\n                count++;\r\n            })\r\n            this.setState({\r\n                count: count,\r\n                idlist: idlist,\r\n                todotree: parsedtree,\r\n            })\r\n        }else{\r\n            // if no stored tree load an example\r\n            const example = [{\"id\":1636337260150,\"tree\":[{\"id\":1636337442117,\"value\":\"Play apex\",\"checked\":true,\"focus\":false},{\"id\":1636337872537,\"value\":\"learn Redux\",\"checked\":false,\"focus\":false}],\"sublistTitle\":\"Click to edit todo list title\"}]\r\n            // const parsedtree = JSON.parse(example);\r\n            let idlist = [];\r\n            let count = 0;\r\n            example.map((list) =>{\r\n                idlist = idlist.concat([list.id]);\r\n                count++;\r\n            })\r\n            this.setState({\r\n                count: count,\r\n                idlist: idlist,\r\n                todotree: example,\r\n            })\r\n            this.storeTree(example)\r\n        }\r\n    }\r\n\r\n    storeTree(todotree){\r\n        // localStorage\r\n        if (todotree.length === 0){\r\n            // console.log(\"clear the localstorage\");\r\n            localStorage.removeItem('toDoList');\r\n        }\r\n        // const tree = JSON.stringify(this.state.todotree.slice());\r\n        const tree = JSON.stringify(todotree.slice());\r\n        localStorage.setItem('toDoList',tree);\r\n        // const storedtree = localStorage.getItem('toDoList')\r\n        // console.log(\"stored\", JSON.parse(storedtree));\r\n    }\r\n    handleStoreSubListTitle(id,title){\r\n        let todotree = this.state.todotree.slice();\r\n        todotree.map((list)=>{\r\n            if(list.id === id){\r\n                list.sublistTitle = title\r\n            }\r\n        })\r\n        this.setState({\r\n            todotree: todotree\r\n        })\r\n        this.storeTree(todotree);\r\n        console.log(\"subtitle\",todotree,id,title)\r\n    }\r\n    handleStoreToDoList(id,e){\r\n        let idlist = this.state.idlist.slice();\r\n        let todotree = this.state.todotree.slice();\r\n        todotree.map((list)=>{\r\n            if(list.id === id){\r\n                list.tree = e\r\n            }\r\n        })\r\n        // console.log(\"storing the tree\",id,e);\r\n        // console.log(\"storing the tree\",idlist,todotree);\r\n        this.setState({\r\n            todotree:  todotree\r\n        })\r\n        this.storeTree(todotree)\r\n    }\r\n    \r\n    handleCreateToDo(){\r\n        // use the time created as id\r\n        const listid = Date.now();\r\n        const idlist = this.state.idlist.slice()\r\n        const todotree = this.state.todotree.slice()\r\n        let newtodotree = todotree.concat([{id: listid, tree: [], sublistTitle: \"To-do\"}])\r\n        this.setState({\r\n            count: this.state.count + 1,\r\n            idlist: idlist.concat([listid]),\r\n            todotree: newtodotree,\r\n        });\r\n        console.log(\"clicked\",listid);\r\n        this.storeTree(newtodotree);\r\n\r\n    }\r\n    isIdSame(item){\r\n        // console.log(item.id,this,item.id === this,item.id == this)\r\n        return item.id === this;\r\n    }\r\n\r\n    handleDeleteToDo(id){\r\n        const idlist = this.state.idlist.slice()\r\n        let todotree = this.state.todotree.slice()\r\n        let pos = idlist.indexOf(id)\r\n        let removedid = idlist.splice(pos,1)\r\n        pos = todotree.findIndex(this.isIdSame,id);\r\n        removedid = todotree.splice(pos,1);\r\n        this.setState({\r\n            count: this.state.count - 1,\r\n            idlist: idlist,\r\n            todotree: todotree\r\n        });\r\n        console.log(\"deleted\",id,idlist,todotree,removedid);\r\n        this.storeTree(todotree);\r\n    }\r\n\r\n    render(){\r\n        // console.log(this.state,typeof(this.state.idlist))\r\n        // console.log(\"render\",this.state)\r\n        const idlist = this.state.idlist.slice()\r\n        const nodeidlist = idlist.map((id) => {\r\n            return(\r\n                <SubList\r\n                    key={id}\r\n                    listid={id}\r\n                    todotree={this.state.todotree}\r\n                    handleDeleteToDo={()=>this.handleDeleteToDo(id)}\r\n                    handleStoreToDoList={(e)=>this.handleStoreToDoList(id,e)}\r\n                    handleStoreSubListTitle={(e)=>this.handleStoreSubListTitle(id,e)}\r\n                />\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"todo-list-container\">\r\n                <h2>This is todo list</h2>\r\n                <p>contenteditable and stored in localStorage</p>\r\n                <div className=\"sublist-container\">\r\n                    <div className=\"todo-create-btn-container\">\r\n                        {nodeidlist}\r\n                        <button \r\n                            className=\"create-todo-list-btn\"\r\n                            onClick={() => this.handleCreateToDo()}\r\n                            >\r\n                            +\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )    \r\n    }\r\n}\r\n\r\nexport default ToDoList;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport TodoList from './todolist'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <header className=\"App-header\">\r\n        \r\n      </header> */}\r\n      <div className=\"App-container\">\r\n        <TodoList/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}